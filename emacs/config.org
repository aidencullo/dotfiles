#+TITLE: Aiden's GNU Emacs Config
#+AUTHOR: Aiden Cullo
#+DESCRIPTION: My personal Emacs config.
#+STARTUP: overview


* GUI
LET'S make GNU Emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* PACKAGES
INSTALL all necessary packages.

** custom
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** archives
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src

** paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t)
#+end_src

** multiple-cursor
#+begin_src emacs-lisp 
  (use-package multiple-cursors
    :bind (
	   ("C->" . mc/mark-next-like-this)
	   ("C-<" . mc/mark-previous-like-this)
	   ("C-c C-<" . mc/mark-all-like-this)
	   )
    :ensure t)
#+end_src
** expand-region
#+begin_src emacs-lisp 
  (use-package expand-region
    :bind (
	   ("C-=" . er/expand-region)
	   ("C-+" . er/contract-region)
	   )
    :ensure t)
#+end_src

** lorem-ipsum
#+begin_src emacs-lisp 
  (use-package lorem-ipsum
    :bind (
	   ("C-c C-l s" . lorem-ipsum-insert-sentences)
	   ("C-c C-l p" . lorem-ipsum-insert-paragraphs)
	   ("C-c C-l l" . lorem-ipsum-insert-list)
	   )
    :ensure t
    )
#+end_src

** Shell variables
#+begin_src emacs-lisp 
  (use-package exec-path-from-shell
    :ensure t
    )
#+end_src

** editable grep buffer

#+begin_src emacs-lisp 
  (use-package wgrep
    :ensure t
    )
#+end_src

** yassnippets

#+begin_src emacs-lisp 
  (use-package yasnippet                  ; Snippets
    :ensure t
    :config
    (yas-reload-all)
    (yas-global-mode))
#+end_src

** vertico
#+begin_src emacs-lisp 
  (use-package vertico
    :ensure t
    :config
    (vertico-mode 1)
    )
#+end_src

** marginalia
#+begin_src emacs-lisp 
  (use-package marginalia
    :ensure t
    :config
    (marginalia-mode 1)
    )
#+end_src

** keycast
#+begin_src emacs-lisp 
  (use-package keycast
    :ensure t
    :config
    (keycast-mode-line-mode 1)
    )
#+end_src

** straight.el
#+begin_src emacs-lisp 
  ;; straight.el bootstrap installation
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

** copilot
#+begin_src emacs-lisp
  (use-package copilot
    :straight
    (:host github
	   :repo "copilot-emacs/copilot.el"
	   :files ("dist" "*.el")
	   )
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'copilot-mode)
    :bind (
	   :map copilot-mode-map
	   ("<tab>" . copilot-accept-completion)
	   )
    )
#+end_src

** consult
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    )
#+end_src

** magit
#+begin_src emacs-lisp

;; Ensure 'use-package' is available
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Load and configure Magit using 'use-package'
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))

#+end_src


* SETTINGS
SET modes and global variables.

** History
#+begin_src emacs-lisp
  ;; save history in mini-buffer prompts
  (savehist-mode 1)
  ;; refresh buffers if file changes on disk
  (global-auto-revert-mode 1)
#+end_src
** Theme
#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

** Keys
#+begin_src emacs-lisp
  (global-set-key (kbd "M-<backspace>") 'aiden/backward-kill-word-or-chars)
  (global-set-key (kbd "<f6>") (lambda() (interactive)(find-file user-init-file)))
  (global-set-key (kbd "C-c r") 'aiden/repeat-last-shell-command)
  (global-set-key (kbd "C-S-o") 'open-next-line)
  (global-set-key (kbd "C-c d") 'aiden/pytest)

#+end_src

** Other
#+begin_src emacs-lisp
  ;; Display a counter showing the number of the current and the other
  ;; matches.  Place it before the prompt, though it can be after it.
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)

  ;; Make regular Isearch interpret the empty space as a regular
  ;; expression that matches any character between the words you give
  ;; it.
  (setq search-whitespace-regexp ".*?")

  ;; stop asking before following symlink
  (setq vc-follow-symlinks t)

  ;; flash when bell rings
  (setq visible-bell t)

  ;; C-k kills entire line if at the beginning
  (setq kill-whole-line t)

  ;; for python inferior process
  (setq python-shell-completion-native-disabled-interpreters
	'("python3"))

  ;; move file to trash on delete instead of permanent delete
  (setq delete-by-moving-to-trash t)

  ;; When there are two Dired buffers side-by-side make Emacs
  ;; automatically suggest the other one as the target of copy or rename
  ;; operations.  Remember that you can always use M-p and M-n in the
  ;; minibuffer to cycle through the history, regardless of what this
  ;; does.  (The "dwim" stands for "Do What I Mean".)
  (setq dired-dwim-target t)

  ;; save buffer when repeating last cmd
  (advice-add 'aiden/repeat-last-shell-command :before 'save-buffer)

  ;; mimic system shell in emacs
  ;; useful for env variables
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))


  ;; add custom functions to python mode
  (eval-after-load "python"
    '(progn
       (define-key python-mode-map (kbd "C-c C-c") 'aiden/my-python-shell-run)
       (define-key python-mode-map (kbd "C-c C-r") 'aiden/python-shell-rerun)))

  ;; interim function -- i want to hook a parser upon entering python mode
  (defun print-current-buffer ()
    "Print the current buffer's content."
    (print (buffer-string)))

  (defun print-current-buffer-in-python-mode ()
    "Print the current buffer's content when entering Python mode."
    (when (eq major-mode 'python-mode)
      (message "Printing current buffer...")
      (print-current-buffer)))

  (add-hook 'python-mode-hook 'print-current-buffer-in-python-mode)


#+end_src

** BACKUP 
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src emacs-lisp
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
  (setq dired-omit-files "__pycache__")
#+end_src

** COMPANY
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

#+end_src
** symlinks
Follow symlinks without asking if it's ok
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** errors
Full debug on error
#+begin_src emacs-lisp
  (setq debug-on-error t)
#+end_src

* FUNCTIONS
My custom functions

** general
#+begin_src emacs-lisp  

  (defun open-next-line (n)
    (interactive "p")
    (end-of-line)
    (newline))

  (defun aiden/backward-kill-word-or-chars ()
    "Delete the character or word before point."
    (interactive)
    (if (looking-back "\\w" 1)
	(backward-kill-word 1)
      (aiden/backward-kill-all-char)))

  (defun aiden/backward-kill-all-char ()
    "Delete the character or word before point."
    (interactive)
    (while (not (looking-back "\\w" 1))
      (backward-delete-char 1)))

  (defun aiden/python-shell-rerun ()
    (interactive)
    (set-buffer python-target)
    (aiden/my-python-shell-run))

  (defun aiden/my-python-shell-run ()
    "recompile python buffer and send to repl."
    (interactive)
    (progn
      (python-shell-restart)
      (sleep-for 0.5)
      (python-shell-send-buffer))
    (setq python-target (current-buffer)))

  (defun aiden/repeat-last-shell-command (&rest r)
    "Search and repeat last shell command."
    (interactive)
    (shell-command (cadr (assoc 'shell-command command-history))))

  (defun aiden/pytest ()
    "Runs pytest shell command and displays output in a buffer called *Tidy Error Buffer*"
    (interactive)
    (shell-command
     "pytest"
     "*Tidy Error Buffer*"))

#+end_src

** experimental
#+begin_src emacs-lisp
  (defun transpose-arguments ()
    (interactive)
    (forward-word)
    (backward-word)
    (setq beg_of_arg (point))
    (search-forward ")")
    (backward-char)
    (setq end_of_arg (point))
    (search-backward "(")
    (forward-char)
    (setq beg_of_arg1 (point))
    (search-forward ",")
    (backward-char)
    (setq end_of_arg1 (point))
    (transpose-regions beg_of_arg end_of_arg beg_of_arg1 end_of_arg1))

  (defun ff ()
    "sample code to show region begin/end positions"
    (interactive)
    (message "begin at %s\nend at %s"
	     (region-beginning)
	     (region-end)))

  (defun pt ()
    "sample code to show region begin/end positions"
    (interactive)
    (message "point at %s"
	     (point)))

#+end_src

* HOOKS

builtin mode hooks.

#+begin_src emacs-lisp

  ;; dired modes
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'dired-omit-mode)

  ;; full screen on start-up
  (add-hook 'after-init-hook 'toggle-frame-fullscreen)

  ;; paredit
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  ;; (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

#+end_src
