#+TITLE: Aiden's GNU Emacs Config
#+AUTHOR: Aiden Cullo
#+DESCRIPTION: My personal Emacs config.
#+STARTUP: showall

* GUI
Let's make GNU Emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* PACKAGES
Install all necessary packages.

** Manage custome
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Package archives
#+begin_src emacs-lisp
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src

** Setting mods
#+begin_src emacs-lisp
  ;; save history in mini-buffer prompts
  (setq history-length 25)
  (savehist-mode 1)

  ;; refresh buffers if file changes on disk
  (global-auto-revert-mode 1)
#+end_src

** Install paredit
#+begin_src emacs-lisp
  (use-package paredit
    :ensure t)
#+end_src
** Install multiple-cursor
#+begin_src emacs-lisp 
  (use-package multiple-cursors
    :bind (
	   ("C->" . mc/mark-next-like-this)
	   ("C-<" . mc/mark-previous-like-this)
	   ("C-c C-<" . mc/mark-all-like-this)
	   )
    :ensure t)
#+end_src
** Install expand-region
#+begin_src emacs-lisp 
  (use-package expand-region
    :bind (
	   ("C-=" . er/expand-region)
	   ("C-+" . er/contract-region)
	   )
    :ensure t)
#+end_src
** Install lorem-ipsum
#+begin_src emacs-lisp 
  (use-package lorem-ipsum
    :bind (
	   ("C-c C-l s" . lorem-ipsum-insert-sentences)
	   ("C-c C-l p" . lorem-ipsum-insert-paragraphs)
	   ("C-c C-l l" . lorem-ipsum-insert-list)
	   )
    :ensure t
    )
#+end_src
** Install other packages/settings
#+begin_src emacs-lisp

  ;; Display a counter showing the number of the current and the other
  ;; matches.  Place it before the prompt, though it can be after it.
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)

  ;; Make regular Isearch interpret the empty space as a regular
  ;; expression that matches any character between the words you give
  ;; it.
  (setq search-whitespace-regexp ".*?")

  ;; full screen on start-up
  (add-hook 'after-init-hook 'toggle-frame-fullscreen)

  ;; stop asking before following symlink
  (setq vc-follow-symlinks t)

  ;; flash when bell rings
  (setq visible-bell t)

  ;; C-k kills entire line if at the beginning
  (setq kill-whole-line t)

  ;; autosaves
  (setq auto-save-file-name-transforms
	`((".*" "~/.emacs.d/autosaves/" t)))

  ;; save backups in a special dir
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5    ; and how many of the old
	)

  ;; for python inferior process
  (setq python-shell-completion-native-disabled-interpreters
	'("python3"))

  (load-theme 'modus-vivendi t)

  (global-set-key (kbd "C-x m") 'toggle-frame-fullscreen)
  (global-set-key (kbd "M-<backspace>") 'backward-kill-word-or-chars)

  '(virtualenv-root "~")

  ;; paredit
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  ;; (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

  ;; open emacs source file
  (global-set-key (kbd "<f6>") (lambda() (interactive)(find-file user-init-file)))

  (defun my-python-shell-run ()
    (interactive)
    (python-shell-send-buffer))

  (defun my-python-shell-rerun ()
    (interactive)
    (set-buffer python-target)
    (my-python-shell-run))

  (eval-after-load "python"
    '(progn
       (print "evaluating python mode")
       (define-key python-mode-map (kbd "C-c C-c") 'my-python-shell-run)
       (define-key python-mode-map (kbd "C-c C-r") 'my-python-shell-rerun)))

  (defun my-python-shell-run ()
    (interactive)
    (progn
      (python-shell-restart)
      (sleep-for 0.5)
      (python-shell-send-buffer))
    (setq python-target (current-buffer)))

  (defun after-run-python (&rest _)
    "Switch windows after running python."
    (other-window 1))

  ;; stay on current window
  (advice-add 'run-python :after 'after-run-python)

  ;; install use-package if not installed
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))

  ;; hook saving file here
  (defun aiden/repeat-last-shell-command (&rest r)
    "Search and repeat last shell command."
    (interactive)
    (shell-command (cadr (assoc 'shell-command command-history))))

  (global-set-key (kbd "C-c r") 'aiden/repeat-last-shell-command)

  (advice-add 'aiden/repeat-last-shell-command :before 'save-buffer)

  (add-hook 'dired-mode-hook #'dired-hide-details-mode)

  ;; move file to trash on delete instead of permanent delete
  (setq delete-by-moving-to-trash t)

  ;; When there are two Dired buffers side-by-side make Emacs
  ;; automatically suggest the other one as the target of copy or rename
  ;; operations.  Remember that you can always use M-p and M-n in the
  ;; minibuffer to cycle through the history, regardless of what this
  ;; does.  (The "dwim" stands for "Do What I Mean".)
  (setq dired-dwim-target t)

  ;; Teach Dired to use a specific external program with either the
  ;; `dired-do-shell-command' or `dired-do-async-shell-command' command
  ;; (with the default keys, those are bound to `!' `&', respectively).
  ;; The first string is a pattern match against file names.  The
  ;; remaining strings are external programs that Dired will provide as
  ;; suggestions.  Of course, you can always type an arbitrary program
  ;; despite these defaults.
  (setq dired-guess-shell-alist-user
	'(("\\.\\(pdf\\)" "open")))

#+end_src

* SETTINGS
Set modes and global variables.

** History
#+begin_src emacs-lisp
  ;; save history in mini-buffer prompts
  (setq history-length 25)
  (savehist-mode 1)
  ;; refresh buffers if file changes on disk
  (global-auto-revert-mode 1)
#+end_src
** Theme
#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

** Keys
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x m") 'toggle-frame-fullscreen)
  (global-set-key (kbd "M-<backspace>") 'backward-kill-word-or-chars)
  (global-set-key (kbd "<f6>") (lambda() (interactive)(find-file user-init-file)))
  (global-set-key (kbd "C-c r") 'aiden/repeat-last-shell-command)
#+end_src

** Other
#+begin_src emacs-lisp
  ;; Display a counter showing the number of the current and the other
  ;; matches.  Place it before the prompt, though it can be after it.
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)

  ;; Make regular Isearch interpret the empty space as a regular
  ;; expression that matches any character between the words you give
  ;; it.
  (setq search-whitespace-regexp ".*?")

  ;; stop asking before following symlink
  (setq vc-follow-symlinks t)

  ;; flash when bell rings
  (setq visible-bell t)

  ;; C-k kills entire line if at the beginning
  (setq kill-whole-line t)

  ;; autosaves
  (setq auto-save-file-name-transforms
	`((".*" "~/.emacs.d/autosaves/" t)))

  ;; save backups in a special dir
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5    ; and how many of the old
	)

  ;; for python inferior process
  (setq python-shell-completion-native-disabled-interpreters
	'("python3"))


  (advice-add 'aiden/repeat-last-shell-command :before 'save-buffer)

  ;; move file to trash on delete instead of permanent delete
  (setq delete-by-moving-to-trash t)

  ;; When there are two Dired buffers side-by-side make Emacs
  ;; automatically suggest the other one as the target of copy or rename
  ;; operations.  Remember that you can always use M-p and M-n in the
  ;; minibuffer to cycle through the history, regardless of what this
  ;; does.  (The "dwim" stands for "Do What I Mean".)
  (setq dired-dwim-target t)

  ;; Teach Dired to use a specific external program with either the
  ;; `dired-do-shell-command' or `dired-do-async-shell-command' command
  ;; (with the default keys, those are bound to `!' `&', respectively).
  ;; The first string is a pattern match against file names.  The
  ;; remaining strings are external programs that Dired will provide as
  ;; suggestions.  Of course, you can always type an arbitrary program
  ;; despite these defaults.
  (setq dired-guess-shell-alist-user
	'(("\\.\\(pdf\\)" "open")))

#+end_src

* MODES
Global and local mode settings

#+begin_src emacs-lisp  
  ;; vertico
  (vertico-mode 1)
  ;; marginalia
  (marginalia-mode 1)

  (yas-global-mode 1)
  (repeat-mode 1)
  ;; show last key-binding used
  (keycast-mode-line-mode 1)
#+end_src
* FUNCTIONS
My functions

#+begin_src emacs-lisp  
   (defun backward-kill-word-or-chars ()
     "Delete the character or word before point."
     (interactive)
     (if (looking-back "\\w" 1)
	 (backward-kill-word 1)
       (backward-kill-all-char)))

   (defun backward-kill-all-char ()
     "Delete the character or word before point."
     (interactive)
     (while (not (looking-back "\\w" 1))
       (backward-delete-char 1)))

   (defun my-python-shell-rerun ()
     (interactive)
     (set-buffer python-target)
     (my-python-shell-run))

   (eval-after-load "python"
     '(progn
	(print "evaluating python mode")
	(define-key python-mode-map (kbd "C-c C-c") 'my-python-shell-run)
	(define-key python-mode-map (kbd "C-c C-r") 'my-python-shell-rerun)))

   (defun my-python-shell-run ()
     (interactive)
     (progn
       (python-shell-restart)
       (sleep-for 0.5)
       (python-shell-send-buffer))
     (setq python-target (current-buffer)))

   ;; hook saving file here
   (defun aiden/repeat-last-shell-command (&rest r)
     "Search and repeat last shell command."
     (interactive)
     (shell-command (cadr (assoc 'shell-command command-history))))
#+end_src

* HOOKS
builtin mode hooks.

#+begin_src emacs-lisp  
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  ;; full screen on start-up
  (add-hook 'after-init-hook 'toggle-frame-fullscreen)
  ;; paredit
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  ;; (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+end_src

