#+TITLE: Aiden's GNU Emacs Config
#+AUTHOR: Aiden Cullo
#+DESCRIPTION: My personal Emacs config.
#+STARTUP: overview



* Startup

Startup configs.

#+begin_src emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)




  (add-hook 'after-init-hook 'toggle-frame-fullscreen)
#+end_src
* Gui
LET'S make GNU Emacs look a little better.

** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

* Packages
Package configs.

** custom
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** archives
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
#+end_src

** straight.el
#+begin_src emacs-lisp 
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Marking
** multiple-cursor
#+begin_src emacs-lisp 
  (use-package multiple-cursors
    :bind (
	   ("C->" . mc/mark-next-like-this)
	   ("C-<" . mc/mark-previous-like-this)
	   ("C-c C-<" . mc/mark-all-like-this)))
#+end_src
** expand-region
#+begin_src emacs-lisp 
  (use-package expand-region
    :bind (
	   ("C-=" . er/expand-region)
	   ("C-+" . er/contract-region)))
#+end_src

* Minibuffer
** vertico
#+begin_src emacs-lisp 
  (use-package vertico
    :hook (after-init . vertico-mode)
    :config
    (setq vertico-scroll-margin 0)
    (setq vertico-count 5)
    (setq vertico-resize nil)
    (setq vertico-cycle t)

    (with-eval-after-load 'rfn-eshadow
      ;; This works with `file-name-shadow-mode' enabled.  When you are in
      ;; a sub-directory and use, say, `find-file' to go to your home '~/'
      ;; or root '/' directory, Vertico will clear the old path to keep
      ;; only your current input.
      (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)))
#+end_src

** marginalia
#+begin_src emacs-lisp 
  (use-package marginalia
    :config
    (marginalia-mode 1))
#+end_src

** keycast
#+begin_src emacs-lisp
  (use-package keycast
    :config
    (keycast-mode-line-mode 1))
#+end_src

* Shell
** Shell variables
#+begin_src emacs-lisp 
  (use-package exec-path-from-shell)
#+end_src

* Dired
** dired-x
#+begin_src emacs-lisp
  (require 'dired)
  (require 'dired-x)

  ;; Enable dired-omit-mode by default
  (add-hook 'dired-mode-hook 'dired-omit-mode)

  ;; Customize the omitted files and directories
  (setq dired-omit-files (concat dired-omit-files "\\|^\\.\\|^#.*#$\\|^.*cache.*$"))
  (setq dired-omit-files (concat dired-omit-files "\\|node_modules"))

  ;; ;; load dired-x solely for dired-omit-mode
  ;; (use-package dired-x
  ;;   :ensure t
  ;;   :config
  ;; (setq dired-omit-files (concat dired-omit-files "\\|__pycache__$"))
  ;; (setq dired-omit-files (concat dired-omit-files "\\|.*cache*")))

#+end_src

* Completion
** copilot
#+begin_src emacs-lisp
  (use-package copilot
    :straight (:host github
		     :repo "copilot-emacs/copilot.el"
		     :files ("dist" "*.el"))
    :hook ((org-mode . copilot-mode)
	   (prog-mode . copilot-mode))
    :config
    (setq copilot-indent-offset-warning-disable t)
    :bind (:map copilot-mode-map
		("<tab>" . copilot-accept-completion)))

  (global-set-key (kbd "C-x c") 'copilot-mode)
#+end_src

** yassnippets
#+begin_src emacs-lisp 
  (use-package yasnippet
    :config
    (yas-reload-all)
    (yas-global-mode))
#+end_src

** lorem-ipsum
#+begin_src emacs-lisp 
  (use-package lorem-ipsum
    :bind (
	   ("C-c C-l s" . lorem-ipsum-insert-sentences)
	   ("C-c C-l p" . lorem-ipsum-insert-paragraphs)
	   ("C-c C-l l" . lorem-ipsum-insert-list)))
#+end_src

* Programming Languages
** magit
#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+end_src

** vue
#+begin_src emacs-lisp
  (use-package vue-mode
    :mode "\\.vue\\'"
    :config
    (setq mmm-submode-decoration-level 2)
    (use-package flycheck
      :config
      (flycheck-add-mode 'javascript-eslint 'vue-mode)
      (add-hook 'vue-mode-hook 'flycheck-mode)))

  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'"
    :config
    (setq js2-basic-offset 2))

  (use-package css-mode
    :ensure t
    :mode "\\.css\\'")
#+end_src
** sql
#+begin_src emacs-lisp
  (use-package sql
    :ensure nil
    :mode ("\\.sql\\'" . sql-mode))
#+end_src

** paredit
#+begin_src emacs-lisp
  (use-package paredit)
#+end_src

** flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode)  ; Enable flycheck globally
    :hook ((prog-mode . flycheck-mode)  ; Enable flycheck in programming modes
	   (text-mode . flycheck-mode)) ; Enable flycheck in text modes
    :config
    (setq flycheck-check-syntax-automatically '(save mode-enabled)))
#+end_src

** JavaScript
#+begin_src emacs-lisp
  (use-package js
    :ensure nil
    :mode ("\\.js\\'" . js-mode)
    :init
    (setq js-indent-level 2))
#+end_src

* Searching
** editable grep buffer
#+begin_src emacs-lisp 
  (use-package wgrep)
  ;; Add node_modules to the list of ignored directories for rgrep
  (add-to-list 'grep-find-ignored-directories "node_modules")

#+end_src

** consult
#+begin_src emacs-lisp
  (use-package consult)
#+end_src

* Visuals
** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Settings
Set modes and global variables.

** History
save history in mini-buffer prompts
refresh buffers if file changes on disk
#+begin_src emacs-lisp
  (savehist-mode 1)
  (global-auto-revert-mode 1)
#+end_src
** Theme
#+begin_src emacs-lisp
  (load-theme 'modus-vivendi t)
#+end_src

** Keys
#+begin_src emacs-lisp
  (global-set-key (kbd "M-<backspace>") 'aiden/backward-kill-word-or-chars)
  (global-set-key (kbd "C-c r") 'aiden/repeat-last-shell-command)
  (global-set-key (kbd "C-S-o") 'open-next-line)
  (global-set-key (kbd "C-c d") 'aiden/pytest)
#+end_src

** Other
#+begin_src emacs-lisp
  ;; Display a counter showing the number of the current and the other
  ;; matches.  Place it before the prompt, though it can be after it.
  (setq isearch-lazy-count t)
  (setq lazy-count-prefix-format "(%s/%s) ")
  (setq lazy-count-suffix-format nil)

  ;; Make regular Isearch interpret the empty space as a regular
  ;; expression that matches any character between the words you give
  ;; it.
  (setq search-whitespace-regexp ".*?")

  ;; stop asking before following symlink
  (setq vc-follow-symlinks t)

  ;; flash when bell rings
  (setq visible-bell t)

  ;; C-k kills entire line if at the beginning
  (setq kill-whole-line t)

  ;; for python inferior process
  (setq python-shell-completion-native-disabled-interpreters
	'("python3"))

  ;; move file to trash on delete instead of permanent delete
  (setq delete-by-moving-to-trash t)

  ;; When there are two Dired buffers side-by-side make Emacs
  ;; automatically suggest the other one as the target of copy or rename
  ;; operations.  Remember that you can always use M-p and M-n in the
  ;; minibuffer to cycle through the history, regardless of what this
  ;; does.  (The "dwim" stands for "Do What I Mean".)
  (setq dired-dwim-target t)

  ;; save buffer when repeating last cmd

  ;; mimic system shell in emacs
  ;; useful for env variables
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize))


  ;; add custom functions to python mode
  (eval-after-load "python"
    '(progn
       (define-key python-mode-map (kbd "C-c C-c") 'aiden/my-python-shell-run)
       (define-key python-mode-map (kbd "C-c C-r") 'aiden/python-shell-rerun)))

  (defun my-python-save-hook ()
    "Function to run every time a Python file is saved."
    (custom-replace-string))

  (defun add-python-save-hook ()
    "Add my-python-save-hook to the local after-save-hook."
    (add-hook 'after-save-hook #'my-python-save-hook nil t))

  ;; (add-hook 'python-mode-hook #'add-python-save-hook)


#+end_src

** Backup 
By default, Emacs creates automatic backups of files in their original directories, such "file.el" and the backup "file.el~".  This leads to a lot of clutter, so let's tell Emacs to put all backups that it creates in the =TRASH= directory.

#+begin_src emacs-lisp
  ;; store all backups in one place
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files")))
  (make-directory "~/.local/share/Trash/files" t)

  ;; backups are made by copying files
  (setq backup-by-copying t)

  ;; versioned backups
  (setq version-control t)     ;; Use version numbers for backups
  (setq kept-new-versions 10)  ;; Number of newest versions to keep
  (setq kept-old-versions 2)   ;; Number of oldest versions to keep
  (setq delete-old-versions t) ;; Automatically delete excess backups
#+end_src

** Company
[[https://company-mode.github.io/][Company]] is a text completion framework for Emacs. The name stands for "complete anything".  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.

#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))
#+end_src
** symlinks
Follow symlinks without asking if it's ok
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t)
#+end_src
** errors
Full debug on error
#+begin_src emacs-lisp
  (setq debug-on-error t)
#+end_src

* Functions
My custom functions

** general

#+begin_src emacs-lisp  
  (defun open-next-line (n)
    (interactive "p")
    (end-of-line)
    (newline))

  (defun aiden/backward-kill-word-or-chars ()
    "Delete the character or word before point."
    (interactive)
    (if (looking-back "\\w" 1)
	(backward-kill-word 1)
      (aiden/backward-kill-all-char)))

  (defun aiden/backward-kill-all-char ()
    "Delete the character or word before point."
    (interactive)
    (while (not (looking-back "\\w" 1))
      (backward-delete-char 1)))

  (defun aiden/python-shell-rerun ()
    (interactive)
    (set-buffer python-target)
    (aiden/my-python-shell-run))

  (defun aiden/my-python-shell-run ()
    "recompile python buffer and send to repl."
    (interactive)
    (progn
      (python-shell-restart)
      (sleep-for 0.5)
      (python-shell-send-buffer))
    (setq python-target (current-buffer)))

  (defun aiden/repeat-last-shell-command (&rest r)
    "Search and repeat last shell command."
    (interactive)
    (shell-command (cadr (assoc 'shell-command command-history))))

  (defun aiden/pytest ()
    "Runs pytest shell command and displays output in a buffer called *Tidy Error Buffer*"
    (interactive)
    (save-buffer)
    (shell-command
     "pytest"
     "*Tidy Error Buffer*"))
#+end_src

** position
#+begin_src emacs-lisp
  (defun ff ()
    "sample code to show region begin/end positions"
    (interactive)
    (message "begin at %s\nend at %s"
	     (region-beginning)
	     (region-end)))

  (defun pt ()
    "sample code to show region begin/end positions"
    (interactive)
    (message "point at %s"
	     (point)))
#+end_src

** replace list
#+begin_src emacs-lisp
  (defun custom-replace-string ()
    "Replace OLD with NEW in the current buffer."
    (interactive)
    (replace-string "List" "list" nil (point-min) (point-max)))
#+end_src

* Hooks

Mode hooks.

#+begin_src emacs-lisp
  ;; dired
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)
  (add-hook 'dired-mode-hook #'dired-omit-mode)

  ;; paredit
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  ;; (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
#+end_src
